const inquirer = require('inquirer');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const os = require('os');

/**
 * CLI para gesti√≥n de configuraci√≥n del sistema
 * Permite configurar MongoDB, variables de entorno y ajustes del sistema
 */
class ConfigCLI {
    constructor(db) {
        this.db = db;
        this.configPath = path.join(process.cwd(), '.env');
    }

    /**
     * Muestra el men√∫ principal de configuraci√≥n
     */
    async mostrarMenuConfiguracion() {
        this.limpiarPantalla();
        console.log(chalk.blue('‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA'));
        console.log(chalk.gray('================================\n'));

        const opciones = [
            {
                type: 'list',
                name: 'opcion',
                message: chalk.yellow('¬øQu√© desea configurar?'),
                choices: [
                    { name: 'üîó Configuraci√≥n de Base de Datos', value: 'database' },
                    { name: 'üåê Variables de Entorno', value: 'env' },
                    { name: 'üìä √çndices de MongoDB', value: 'indexes' },
                    { name: 'üß™ Probar Conexi√≥n', value: 'test' },
                    { name: 'üìÅ Abrir Carpeta de Configuraci√≥n', value: 'folder' },
                    { name: 'üîÑ Reiniciar Sistema', value: 'restart' },
                    { name: 'üìã Ver Estado del Sistema', value: 'status' },
                    { name: 'üîô Volver al Men√∫ Principal', value: 'volver' }
                ],
                pageSize: 10
            }
        ];

        const respuesta = await inquirer.prompt(opciones);

        switch (respuesta.opcion) {
            case 'database':
                await this.configurarBaseDatos();
                break;
            case 'env':
                await this.configurarVariablesEntorno();
                break;
            case 'indexes':
                await this.gestionarIndices();
                break;
            case 'test':
                await this.probarConexion();
                break;
            case 'folder':
                await this.abrirCarpetaConfiguracion();
                break;
            case 'restart':
                await this.reiniciarSistema();
                break;
            case 'status':
                await this.verEstadoSistema();
                break;
            case 'volver':
                this.limpiarPantalla();
                console.log(chalk.green('‚úÖ Regresando al men√∫ principal...\n'));
                return;
        }

        // Volver al men√∫ de configuraci√≥n
        await this.mostrarMenuConfiguracion();
    }

    /**
     * Configura la base de datos
     */
    async configurarBaseDatos() {
        this.limpiarPantalla();
        console.log(chalk.blue('üîó CONFIGURACI√ìN DE BASE DE DATOS'));
        console.log(chalk.gray('==================================\n'));

        const opciones = [
            {
                type: 'list',
                name: 'opcion',
                message: chalk.yellow('¬øQu√© desea hacer?'),
                choices: [
                    { name: 'üìù Configurar Conexi√≥n MongoDB', value: 'connection' },
                    { name: 'üîß Configurar Replica Set', value: 'replica' },
                    { name: 'üìä Crear √çndices', value: 'create_indexes' },
                    { name: 'üóëÔ∏è Eliminar √çndices', value: 'drop_indexes' },
                    { name: 'üìã Ver Estado de Conexi√≥n', value: 'status' },
                    { name: 'üîô Volver', value: 'volver' }
                ]
            }
        ];

        const respuesta = await inquirer.prompt(opciones);

        switch (respuesta.opcion) {
            case 'connection':
                await this.configurarConexionMongoDB();
                break;
            case 'replica':
                await this.configurarReplicaSet();
                break;
            case 'create_indexes':
                await this.crearIndices();
                break;
            case 'drop_indexes':
                await this.eliminarIndices();
                break;
            case 'status':
                await this.verEstadoConexion();
                break;
            case 'volver':
                return;
        }

        await this.pausar();
    }

    /**
     * Configura la conexi√≥n a MongoDB
     */
    async configurarConexionMongoDB() {
        console.log(chalk.cyan('\nüìù CONFIGURACI√ìN DE CONEXI√ìN MONGODB\n'));

        const configuracion = await inquirer.prompt([
            {
                type: 'input',
                name: 'uri',
                message: 'üîó URI de MongoDB:',
                default: 'mongodb://localhost:27017',
                validate: (input) => {
                    if (!input || input.trim() === '') {
                        return '‚ùå La URI es obligatoria';
                    }
                    return true;
                }
            },
            {
                type: 'input',
                name: 'database',
                message: 'üìä Nombre de la base de datos:',
                default: 'gymmaster',
                validate: (input) => {
                    if (!input || input.trim() === '') {
                        return '‚ùå El nombre de la base de datos es obligatorio';
                    }
                    return true;
                }
            },
            {
                type: 'confirm',
                name: 'guardar',
                message: 'üíæ ¬øGuardar configuraci√≥n en archivo .env?',
                default: true
            }
        ]);

        if (configuracion.guardar) {
            await this.guardarConfiguracion({
                MONGODB_URI: configuracion.uri,
                MONGODB_DATABASE: configuracion.database
            });
        }

        console.log(chalk.green('\n‚úÖ Configuraci√≥n de conexi√≥n completada'));
    }

    /**
     * Configura el Replica Set
     */
    async configurarReplicaSet() {
        console.log(chalk.cyan('\nüîß CONFIGURACI√ìN DE REPLICA SET\n'));

        const { ejecutar } = await inquirer.prompt([{
            type: 'confirm',
            name: 'ejecutar',
            message: 'üöÄ ¬øEjecutar script de configuraci√≥n de Replica Set?',
            default: true
        }]);

        if (ejecutar) {
            console.log(chalk.yellow('\n‚è≥ Ejecutando configuraci√≥n de Replica Set...'));
            
            try {
                const { spawn } = require('child_process');
                const scriptPath = path.join(process.cwd(), 'scripts', 'setup-replica-set.js');
                
                if (fs.existsSync(scriptPath)) {
                    const child = spawn('node', [scriptPath], { stdio: 'inherit' });
                    
                    child.on('close', (code) => {
                        if (code === 0) {
                            console.log(chalk.green('\n‚úÖ Replica Set configurado exitosamente'));
                        } else {
                            console.log(chalk.red('\n‚ùå Error al configurar Replica Set'));
                        }
                    });
                } else {
                    console.log(chalk.yellow('‚ö†Ô∏è Script de configuraci√≥n no encontrado'));
                }
            } catch (error) {
                console.log(chalk.red(`‚ùå Error: ${error.message}`));
            }
        }
    }

    /**
     * Crea √≠ndices de MongoDB
     */
    async crearIndices() {
        console.log(chalk.cyan('\nüìä CREANDO √çNDICES DE MONGODB\n'));

        try {
            const { ConnectionManager } = require('../config/connection');
            const connectionManager = new ConnectionManager();
            
            console.log(chalk.yellow('‚è≥ Creando √≠ndices...'));
            await connectionManager.createIndexes(this.db);
            
            console.log(chalk.green('‚úÖ √çndices creados exitosamente'));
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al crear √≠ndices: ${error.message}`));
        }
    }

    /**
     * Elimina √≠ndices de MongoDB
     */
    async eliminarIndices() {
        console.log(chalk.cyan('\nüóëÔ∏è ELIMINANDO √çNDICES DE MONGODB\n'));

        const { confirmar } = await inquirer.prompt([{
            type: 'confirm',
            name: 'confirmar',
            message: '‚ö†Ô∏è ¬øEst√° seguro de eliminar todos los √≠ndices?',
            default: false
        }]);

        if (confirmar) {
            try {
                const collections = ['clientes', 'planes', 'contratos', 'seguimientos', 'finanzas', 'pagos', 'nutricion'];
                
                for (const collectionName of collections) {
                    try {
                        await this.db.collection(collectionName).dropIndexes();
                        console.log(chalk.green(`‚úÖ √çndices eliminados de ${collectionName}`));
                    } catch (error) {
                        console.log(chalk.yellow(`‚ö†Ô∏è No se pudieron eliminar √≠ndices de ${collectionName}: ${error.message}`));
                    }
                }
                
                console.log(chalk.green('\n‚úÖ Proceso de eliminaci√≥n completado'));
            } catch (error) {
                console.log(chalk.red(`‚ùå Error al eliminar √≠ndices: ${error.message}`));
            }
        }
    }

    /**
     * Ver estado de la conexi√≥n
     */
    async verEstadoConexion() {
        console.log(chalk.cyan('\nüìã ESTADO DE CONEXI√ìN\n'));

        try {
            // Verificar conexi√≥n
            const admin = this.db.admin();
            const serverStatus = await admin.serverStatus();
            
            console.log(chalk.green('‚úÖ Conexi√≥n activa'));
            console.log(chalk.blue(`üìä Host: ${serverStatus.host}`));
            console.log(chalk.blue(`üî¢ Puerto: ${serverStatus.port}`));
            console.log(chalk.blue(`üìÖ Versi√≥n: ${serverStatus.version}`));
            console.log(chalk.blue(`‚è±Ô∏è Uptime: ${Math.floor(serverStatus.uptime / 60)} minutos`));

            // Verificar colecciones
            const collections = await this.db.listCollections().toArray();
            console.log(chalk.blue(`üìÅ Colecciones: ${collections.length}`));
            
            for (const collection of collections) {
                const count = await this.db.collection(collection.name).countDocuments();
                console.log(chalk.gray(`  ‚Ä¢ ${collection.name}: ${count} documentos`));
            }

        } catch (error) {
            console.log(chalk.red(`‚ùå Error al verificar conexi√≥n: ${error.message}`));
        }
    }

    /**
     * Configura variables de entorno
     */
    async configurarVariablesEntorno() {
        this.limpiarPantalla();
        console.log(chalk.blue('üåê CONFIGURACI√ìN DE VARIABLES DE ENTORNO'));
        console.log(chalk.gray('==========================================\n'));

        const opciones = [
            {
                type: 'list',
                name: 'opcion',
                message: chalk.yellow('¬øQu√© desea hacer?'),
                choices: [
                    { name: 'üìù Editar archivo .env', value: 'edit' },
                    { name: 'üìã Ver variables actuales', value: 'view' },
                    { name: 'üîÑ Recargar variables', value: 'reload' },
                    { name: 'üìÅ Abrir archivo .env', value: 'open' },
                    { name: 'üîô Volver', value: 'volver' }
                ]
            }
        ];

        const respuesta = await inquirer.prompt(opciones);

        switch (respuesta.opcion) {
            case 'edit':
                await this.editarVariablesEntorno();
                break;
            case 'view':
                await this.verVariablesEntorno();
                break;
            case 'reload':
                await this.recargarVariables();
                break;
            case 'open':
                await this.abrirArchivoEnv();
                break;
            case 'volver':
                return;
        }

        await this.pausar();
    }

    /**
     * Edita variables de entorno
     */
    async editarVariablesEntorno() {
        console.log(chalk.cyan('\nüìù EDITAR VARIABLES DE ENTORNO\n'));

        const variables = await inquirer.prompt([
            {
                type: 'input',
                name: 'MONGODB_URI',
                message: 'üîó MONGODB_URI:',
                default: process.env.MONGODB_URI || 'mongodb://localhost:27017'
            },
            {
                type: 'input',
                name: 'MONGODB_DATABASE',
                message: 'üìä MONGODB_DATABASE:',
                default: process.env.MONGODB_DATABASE || 'gymmaster'
            },
            {
                type: 'input',
                name: 'NODE_ENV',
                message: 'üåç NODE_ENV:',
                default: process.env.NODE_ENV || 'development'
            },
            {
                type: 'input',
                name: 'LOG_LEVEL',
                message: 'üìù LOG_LEVEL:',
                default: process.env.LOG_LEVEL || 'info'
            }
        ]);

        await this.guardarConfiguracion(variables);
        console.log(chalk.green('\n‚úÖ Variables de entorno actualizadas'));
    }

    /**
     * Ver variables de entorno actuales
     */
    async verVariablesEntorno() {
        console.log(chalk.cyan('\nüìã VARIABLES DE ENTORNO ACTUALES\n'));

        const variables = {
            'MONGODB_URI': process.env.MONGODB_URI || 'No configurado',
            'MONGODB_DATABASE': process.env.MONGODB_DATABASE || 'No configurado',
            'NODE_ENV': process.env.NODE_ENV || 'No configurado',
            'LOG_LEVEL': process.env.LOG_LEVEL || 'No configurado',
            'APP_NAME': process.env.APP_NAME || 'GymMaster CLI',
            'APP_VERSION': process.env.APP_VERSION || '1.0.0'
        };

        for (const [key, value] of Object.entries(variables)) {
            const status = value === 'No configurado' ? chalk.red(value) : chalk.green(value);
            console.log(chalk.blue(`${key}:`), status);
        }
    }

    /**
     * Recargar variables de entorno
     */
    async recargarVariables() {
        console.log(chalk.cyan('\nüîÑ RECARGANDO VARIABLES DE ENTORNO\n'));

        try {
            delete require.cache[require.resolve('dotenv')];
            require('dotenv').config();
            
            console.log(chalk.green('‚úÖ Variables de entorno recargadas'));
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al recargar variables: ${error.message}`));
        }
    }

    /**
     * Abrir archivo .env
     */
    async abrirArchivoEnv() {
        console.log(chalk.cyan('\nüìÅ ABRIENDO ARCHIVO .ENV\n'));

        try {
            const filePath = path.join(process.cwd(), '.env');
            
            if (fs.existsSync(filePath)) {
                const { exec } = require('child_process');
                const os = require('os');
                
                let comando;
                if (os.platform() === 'win32') {
                    comando = `notepad "${filePath}"`;
                } else if (os.platform() === 'darwin') {
                    comando = `open "${filePath}"`;
                } else {
                    comando = `xdg-open "${filePath}"`;
                }
                
                exec(comando, (error) => {
                    if (error) {
                        console.log(chalk.yellow(`‚ö†Ô∏è No se pudo abrir el archivo autom√°ticamente`));
                        console.log(chalk.gray(`üìÅ Ubicaci√≥n: ${filePath}`));
                    } else {
                        console.log(chalk.green(`üìÅ Archivo abierto: ${filePath}`));
                    }
                });
            } else {
                console.log(chalk.yellow('‚ö†Ô∏è Archivo .env no encontrado'));
                console.log(chalk.gray('üí° Se crear√° autom√°ticamente al guardar configuraci√≥n'));
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al abrir archivo: ${error.message}`));
        }
    }

    /**
     * Gestionar √≠ndices
     */
    async gestionarIndices() {
        this.limpiarPantalla();
        console.log(chalk.blue('üìä GESTI√ìN DE √çNDICES MONGODB'));
        console.log(chalk.gray('================================\n'));

        const opciones = [
            {
                type: 'list',
                name: 'opcion',
                message: chalk.yellow('¬øQu√© desea hacer?'),
                choices: [
                    { name: 'üìä Ver √≠ndices existentes', value: 'list' },
                    { name: '‚ûï Crear √≠ndices', value: 'create' },
                    { name: 'üóëÔ∏è Eliminar √≠ndices', value: 'drop' },
                    { name: 'üîÑ Recrear todos los √≠ndices', value: 'recreate' },
                    { name: 'üìà Estad√≠sticas de √≠ndices', value: 'stats' },
                    { name: 'üîô Volver', value: 'volver' }
                ]
            }
        ];

        const respuesta = await inquirer.prompt(opciones);

        switch (respuesta.opcion) {
            case 'list':
                await this.listarIndices();
                break;
            case 'create':
                await this.crearIndices();
                break;
            case 'drop':
                await this.eliminarIndices();
                break;
            case 'recreate':
                await this.recrearIndices();
                break;
            case 'stats':
                await this.verEstadisticasIndices();
                break;
            case 'volver':
                return;
        }

        await this.pausar();
    }

    /**
     * Listar √≠ndices existentes
     */
    async listarIndices() {
        console.log(chalk.cyan('\nüìä √çNDICES EXISTENTES\n'));

        try {
            const collections = ['clientes', 'planes', 'contratos', 'seguimientos', 'finanzas', 'pagos', 'nutricion'];
            
            for (const collectionName of collections) {
                try {
                    const indexes = await this.db.collection(collectionName).listIndexes().toArray();
                    console.log(chalk.blue(`\nüìÅ ${collectionName}:`));
                    
                    if (indexes.length === 0) {
                        console.log(chalk.gray('  ‚Ä¢ Sin √≠ndices personalizados'));
                    } else {
                        indexes.forEach(index => {
                            const keys = Object.keys(index.key).join(', ');
                            const unique = index.unique ? ' (√∫nico)' : '';
                            console.log(chalk.gray(`  ‚Ä¢ ${index.name}: ${keys}${unique}`));
                        });
                    }
                } catch (error) {
                    console.log(chalk.yellow(`‚ö†Ô∏è Error al listar √≠ndices de ${collectionName}: ${error.message}`));
                }
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al listar √≠ndices: ${error.message}`));
        }
    }

    /**
     * Recrear todos los √≠ndices
     */
    async recrearIndices() {
        console.log(chalk.cyan('\nüîÑ RECREANDO √çNDICES\n'));

        const { confirmar } = await inquirer.prompt([{
            type: 'confirm',
            name: 'confirmar',
            message: '‚ö†Ô∏è ¬øEliminar y recrear todos los √≠ndices?',
            default: false
        }]);

        if (confirmar) {
            try {
                // Primero eliminar
                await this.eliminarIndices();
                
                // Luego crear
                await this.crearIndices();
                
                console.log(chalk.green('\n‚úÖ √çndices recreados exitosamente'));
            } catch (error) {
                console.log(chalk.red(`‚ùå Error al recrear √≠ndices: ${error.message}`));
            }
        }
    }

    /**
     * Ver estad√≠sticas de √≠ndices
     */
    async verEstadisticasIndices() {
        console.log(chalk.cyan('\nüìà ESTAD√çSTICAS DE √çNDICES\n'));

        try {
            const collections = ['clientes', 'planes', 'contratos', 'seguimientos', 'finanzas', 'pagos', 'nutricion'];
            
            for (const collectionName of collections) {
                try {
                    const stats = await this.db.collection(collectionName).stats();
                    console.log(chalk.blue(`\nüìÅ ${collectionName}:`));
                    console.log(chalk.gray(`  ‚Ä¢ Documentos: ${stats.count}`));
                    console.log(chalk.gray(`  ‚Ä¢ Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`));
                    console.log(chalk.gray(`  ‚Ä¢ √çndices: ${stats.nindexes}`));
                    console.log(chalk.gray(`  ‚Ä¢ Tama√±o √≠ndices: ${(stats.totalIndexSize / 1024).toFixed(2)} KB`));
                } catch (error) {
                    console.log(chalk.yellow(`‚ö†Ô∏è Error al obtener estad√≠sticas de ${collectionName}: ${error.message}`));
                }
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al obtener estad√≠sticas: ${error.message}`));
        }
    }

    /**
     * Probar conexi√≥n
     */
    async probarConexion() {
        console.log(chalk.cyan('\nüß™ PROBANDO CONEXI√ìN\n'));

        try {
            console.log(chalk.yellow('‚è≥ Verificando conexi√≥n...'));
            
            // Probar conexi√≥n b√°sica
            const admin = this.db.admin();
            const serverStatus = await admin.serverStatus();
            
            console.log(chalk.green('‚úÖ Conexi√≥n exitosa'));
            console.log(chalk.blue(`üìä Host: ${serverStatus.host}`));
            console.log(chalk.blue(`üî¢ Puerto: ${serverStatus.port}`));
            console.log(chalk.blue(`üìÖ Versi√≥n: ${serverStatus.version}`));

            // Probar operaci√≥n de escritura
            console.log(chalk.yellow('\n‚è≥ Probando operaci√≥n de escritura...'));
            const testCollection = this.db.collection('test_connection');
            await testCollection.insertOne({ test: new Date() });
            await testCollection.deleteMany({});
            
            console.log(chalk.green('‚úÖ Operaci√≥n de escritura exitosa'));

            // Probar transacciones
            console.log(chalk.yellow('\n‚è≥ Probando transacciones...'));
            const session = this.db.client.startSession();
            await session.withTransaction(async () => {
                await testCollection.insertOne({ test: 'transaction' }, { session });
            });
            await session.endSession();
            
            console.log(chalk.green('‚úÖ Transacciones funcionando correctamente'));

        } catch (error) {
            console.log(chalk.red(`‚ùå Error en la conexi√≥n: ${error.message}`));
        }
    }

    /**
     * Abrir carpeta de configuraci√≥n
     */
    async abrirCarpetaConfiguracion() {
        console.log(chalk.cyan('\nüìÅ ABRIENDO CARPETA DE CONFIGURACI√ìN\n'));

        try {
            const configDir = process.cwd();
            const os = require('os');
            
            let comando;
            if (os.platform() === 'win32') {
                comando = `explorer "${configDir}"`;
            } else if (os.platform() === 'darwin') {
                comando = `open "${configDir}"`;
            } else {
                comando = `xdg-open "${configDir}"`;
            }
            
            exec(comando, (error) => {
                if (error) {
                    console.log(chalk.yellow(`‚ö†Ô∏è No se pudo abrir la carpeta autom√°ticamente`));
                    console.log(chalk.gray(`üìÅ Ubicaci√≥n: ${configDir}`));
                } else {
                    console.log(chalk.green(`üìÅ Carpeta abierta: ${configDir}`));
                }
            });
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al abrir carpeta: ${error.message}`));
        }
    }

    /**
     * Reiniciar sistema
     */
    async reiniciarSistema() {
        console.log(chalk.cyan('\nüîÑ REINICIANDO SISTEMA\n'));

        const { confirmar } = await inquirer.prompt([{
            type: 'confirm',
            name: 'confirmar',
            message: '‚ö†Ô∏è ¬øReiniciar el sistema? (Se cerrar√° la aplicaci√≥n)',
            default: false
        }]);

        if (confirmar) {
            console.log(chalk.yellow('\n‚è≥ Reiniciando sistema...'));
            console.log(chalk.green('‚úÖ Sistema reiniciado'));
            process.exit(0);
        }
    }

    /**
     * Ver estado del sistema
     */
    async verEstadoSistema() {
        console.log(chalk.cyan('\nüìã ESTADO DEL SISTEMA\n'));

        try {
            // Informaci√≥n del sistema
            console.log(chalk.blue('üñ•Ô∏è INFORMACI√ìN DEL SISTEMA:'));
            console.log(chalk.gray(`  ‚Ä¢ Plataforma: ${os.platform()} ${os.arch()}`));
            console.log(chalk.gray(`  ‚Ä¢ Node.js: ${process.version}`));
            console.log(chalk.gray(`  ‚Ä¢ Memoria: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)} GB`));
            console.log(chalk.gray(`  ‚Ä¢ CPU: ${os.cpus().length} n√∫cleos`));

            // Informaci√≥n de la aplicaci√≥n
            console.log(chalk.blue('\nüì± INFORMACI√ìN DE LA APLICACI√ìN:'));
            console.log(chalk.gray(`  ‚Ä¢ Directorio: ${process.cwd()}`));
            console.log(chalk.gray(`  ‚Ä¢ PID: ${process.pid}`));
            console.log(chalk.gray(`  ‚Ä¢ Uptime: ${Math.floor(process.uptime())} segundos`));

            // Estado de la base de datos
            console.log(chalk.blue('\nüóÑÔ∏è ESTADO DE LA BASE DE DATOS:'));
            try {
                const admin = this.db.admin();
                const serverStatus = await admin.serverStatus();
                console.log(chalk.green(`  ‚Ä¢ Estado: Conectado`));
                console.log(chalk.gray(`  ‚Ä¢ Host: ${serverStatus.host}`));
                console.log(chalk.gray(`  ‚Ä¢ Versi√≥n: ${serverStatus.version}`));
                console.log(chalk.gray(`  ‚Ä¢ Uptime: ${Math.floor(serverStatus.uptime / 60)} minutos`));
            } catch (error) {
                console.log(chalk.red(`  ‚Ä¢ Estado: Desconectado`));
                console.log(chalk.gray(`  ‚Ä¢ Error: ${error.message}`));
            }

            // Variables de entorno
            console.log(chalk.blue('\nüåê VARIABLES DE ENTORNO:'));
            console.log(chalk.gray(`  ‚Ä¢ MONGODB_URI: ${process.env.MONGODB_URI || 'No configurado'}`));
            console.log(chalk.gray(`  ‚Ä¢ MONGODB_DATABASE: ${process.env.MONGODB_DATABASE || 'No configurado'}`));
            console.log(chalk.gray(`  ‚Ä¢ NODE_ENV: ${process.env.NODE_ENV || 'No configurado'}`));

        } catch (error) {
            console.log(chalk.red(`‚ùå Error al obtener estado del sistema: ${error.message}`));
        }
    }

    /**
     * Guardar configuraci√≥n en archivo .env
     */
    async guardarConfiguracion(config) {
        try {
            let envContent = '';
            
            for (const [key, value] of Object.entries(config)) {
                envContent += `${key}=${value}\n`;
            }
            
            fs.writeFileSync(this.configPath, envContent);
            console.log(chalk.green(`‚úÖ Configuraci√≥n guardada en ${this.configPath}`));
        } catch (error) {
            console.log(chalk.red(`‚ùå Error al guardar configuraci√≥n: ${error.message}`));
        }
    }

    /**
     * Limpiar pantalla
     */
    limpiarPantalla() {
        console.clear();
        console.log(chalk.blue.bold('\nüèãÔ∏è  GYMMASTER CLI - Sistema de Gesti√≥n de Gimnasio'));
        console.log(chalk.gray('================================================\n'));
    }

    /**
     * Pausar y esperar entrada del usuario
     */
    async pausar() {
        console.log(chalk.gray('\n' + '‚îÄ'.repeat(50)));
        await inquirer.prompt([{
            type: 'input',
            name: 'continuar',
            message: chalk.cyan('Presiona Enter para continuar...')
        }]);
    }
}

module.exports = ConfigCLI;
