#!/usr/bin/env node

/**
 * ========================================================================================
 * GYMMASTER CLI - APLICACI√ìN DE GESTI√ìN DE GIMNASIO
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Este es el punto de entrada principal de la aplicaci√≥n GymMaster CLI.
 * Se encarga de inicializar, configurar y ejecutar todo el sistema de gesti√≥n de gimnasio.
 * 
 * ARQUITECTURA:
 * - Aplicaci√≥n CLI (Command Line Interface) para gesti√≥n de gimnasio
 * - Sistema modular con separaci√≥n de responsabilidades
 * - Interfaz de usuario basada en consola con colores y animaciones
 * - Integraci√≥n con MongoDB para persistencia de datos
 * 
 * PATRONES DE DISE√ëO APLICADOS:
 * ========================================================================================
 * 
 * 1. SINGLETON PATTERN:
 *    - GymMasterApp es la instancia √∫nica de la aplicaci√≥n
 *    - Garantiza que solo existe una instancia en toda la aplicaci√≥n
 *    - √ötil para mantener estado global y configuraci√≥n centralizada
 * 
 * 2. FACADE PATTERN:
 *    - GymMasterApp act√∫a como fachada para el sistema completo
 *    - Simplifica la interfaz compleja del sistema
 *    - Oculta la complejidad de los subsistemas (CLI, conexi√≥n DB, etc.)
 * 
 * 3. TEMPLATE METHOD PATTERN:
 *    - M√©todo run() define el flujo est√°ndar de inicializaci√≥n
 *    - M√©todo shutdown() define el flujo est√°ndar de cierre
 *    - Estructura fija pero permite personalizaci√≥n en subclases
 * 
 * 4. OBSERVER PATTERN:
 *    - Manejo de se√±ales del sistema (SIGINT, SIGTERM)
 *    - Los listeners observan y reaccionan a eventos del sistema
 *    - Permite cierre seguro cuando el usuario presiona Ctrl+C
 * 
 * 5. STRATEGY PATTERN:
 *    - showBanner() podr√≠a usar diferentes tipos de banner
 *    - showLoadingAnimation() podr√≠a usar diferentes animaciones
 *    - Permite intercambiar algoritmos sin modificar el c√≥digo cliente
 * 
 * 6. BUILDER PATTERN:
 *    - showMainMenu() construye el men√∫ paso a paso
 *    - Construcci√≥n compleja dividida en pasos simples
 *    - Facilita la creaci√≥n de interfaces complejas
 * 
 * 7. MODULE PATTERN:
 *    - Exportaci√≥n de la clase para uso en otros m√≥dulos
 *    - Encapsulaci√≥n de funcionalidad relacionada
 *    - Punto de entrada condicional con require.main === module
 * 
 * PRINCIPIOS SOLID APLICADOS:
 * ========================================================================================
 * 
 * 1. SINGLE RESPONSIBILITY PRINCIPLE (SRP):
 *    - Cada m√©todo tiene UNA sola responsabilidad espec√≠fica
 *    - initialize(): Solo inicializaci√≥n del sistema
 *    - validateEnvironment(): Solo validaci√≥n de variables de entorno
 *    - showBanner(): Solo mostrar el banner ASCII
 *    - showMainMenu(): Solo mostrar el men√∫ principal
 *    - showLoadingAnimation(): Solo mostrar animaci√≥n de carga
 *    - showWelcomeMessage(): Solo mostrar mensaje de bienvenida
 *    - run(): Solo orquestar el flujo principal
 *    - shutdown(): Solo cerrar la aplicaci√≥n de forma segura
 * 
 * 2. OPEN/CLOSED PRINCIPLE (OCP):
 *    - La clase es ABIERTA para extensi√≥n pero CERRADA para modificaci√≥n
 *    - Se pueden agregar nuevas funcionalidades sin modificar c√≥digo existente
 *    - Los m√©todos son extensibles para nuevas caracter√≠sticas
 *    - Permite agregar nuevos tipos de validaci√≥n, animaci√≥n, etc.
 * 
 * 3. LISKOV SUBSTITUTION PRINCIPLE (LSP):
 *    - Las subclases pueden sustituir a la clase base sin romper funcionalidad
 *    - Aplicable si se crean subclases de GymMasterApp
 *    - Mantiene el comportamiento esperado en todas las implementaciones
 * 
 * 4. INTERFACE SEGREGATION PRINCIPLE (ISP):
 *    - Los clientes no dependen de interfaces que no usan
 *    - Cada m√©todo expone solo la funcionalidad necesaria
 *    - No hay m√©todos "gordos" que hagan demasiadas cosas
 * 
 * 5. DEPENDENCY INVERSION PRINCIPLE (DIP):
 *    - Depende de ABSTRACCIONES, no de implementaciones concretas
 *    - Usa connectionManager (abstracci√≥n) en lugar de MongoDB directo
 *    - Usa config (abstracci√≥n) en lugar de variables hardcodeadas
 *    - Usa GymMasterCLI (abstracci√≥n) en lugar de implementaci√≥n espec√≠fica
 *    - Facilita testing y mantenimiento
 * 
 * FLUJO DE EJECUCI√ìN:
 * ========================================================================================
 * 1. Se crea la instancia de GymMasterApp (Singleton)
 * 2. Se ejecuta app.run() si es el m√≥dulo principal
 * 3. Se inicializa la aplicaci√≥n (conexi√≥n DB, validaci√≥n entorno)
 * 4. Se muestra el banner, animaci√≥n y mensaje de bienvenida
 * 5. Se inicia la interfaz CLI interactiva
 * 6. Se manejan se√±ales del sistema para cierre seguro
 * 
 * BENEFICIOS DE ESTA ARQUITECTURA:
 * ========================================================================================
 * - C√≥digo mantenible y f√°cil de entender
 * - F√°cil testing y debugging
 * - Extensible sin modificar c√≥digo existente
 * - Separaci√≥n clara de responsabilidades
 * - Manejo robusto de errores
 * - Cierre seguro de la aplicaci√≥n
 */

// ========================================================================================
// IMPORTS Y DEPENDENCIAS
// ========================================================================================
// PRINCIPIO DIP: Dependemos de abstracciones, no de implementaciones concretas

const chalk = require('chalk');                    // Librer√≠a para colores en consola
const connectionManager = require('./config/connection');  // Abstracci√≥n para gesti√≥n de conexi√≥n DB
const config = require('./config');                // Abstracci√≥n para configuraci√≥n del sistema
const GymMasterCLI = require('./cli');             // Abstracci√≥n para interfaz CLI

/**
 * ========================================================================================
 * CLASE PRINCIPAL DE LA APLICACI√ìN - GYMMASTERAPP
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Esta es la clase principal que act√∫a como el n√∫cleo de la aplicaci√≥n GymMaster CLI.
 * Se encarga de coordinar todos los aspectos del sistema: inicializaci√≥n, configuraci√≥n,
 * interfaz de usuario, y cierre seguro de la aplicaci√≥n.
 * 
 * PATR√ìN SINGLETON APLICADO:
 * - Esta clase representa la instancia √∫nica de la aplicaci√≥n
 * - Garantiza que solo existe una instancia en toda la aplicaci√≥n
 * - √ötil para mantener estado global y configuraci√≥n centralizada
 * - Evita conflictos de estado entre m√∫ltiples instancias
 * 
 * PRINCIPIO SRP (Single Responsibility Principle):
 * - Responsable √∫nicamente de la gesti√≥n del ciclo de vida de la aplicaci√≥n
 * - Orquesta el flujo principal sin implementar detalles espec√≠ficos
 * - Delega responsabilidades espec√≠ficas a otros m√≥dulos
 * - Mantiene el estado global de la aplicaci√≥n
 */
class GymMasterApp {
    /**
     * ========================================================================================
     * CONSTRUCTOR DE LA APLICACI√ìN
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Inicializa el estado b√°sico de la aplicaci√≥n sin realizar operaciones costosas.
     * Solo establece el estado inicial necesario para el funcionamiento.
     * 
     * PRINCIPIO SRP:
     * - Solo inicializa el estado b√°sico de la aplicaci√≥n
     * - No realiza operaciones de I/O o conexiones
     * - Responsabilidad √∫nica de establecer el estado inicial
     * 
     * ESTADO INICIAL:
     * - isInitialized: Controla si la aplicaci√≥n ha sido inicializada
     * - Permite evitar inicializaciones m√∫ltiples
     * - Facilita el manejo del flujo de la aplicaci√≥n
     */
    constructor() {
        // Estado de inicializaci√≥n para control de flujo
        // PRINCIPIO SRP: Solo maneja el estado de inicializaci√≥n
        this.isInitialized = false;
    }

    /**
     * ========================================================================================
     * M√âTODO DE INICIALIZACI√ìN DE LA APLICACI√ìN
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Este es el m√©todo principal que inicializa toda la aplicaci√≥n. Se encarga de:
     * - Validar el entorno de ejecuci√≥n
     * - Establecer conexi√≥n con la base de datos
     * - Configurar el estado de la aplicaci√≥n
     * - Manejar errores de inicializaci√≥n
     * 
     * FLUJO DE INICIALIZACI√ìN:
     * 1. Mostrar informaci√≥n de la aplicaci√≥n
     * 2. Validar variables de entorno
     * 3. Conectar a MongoDB
     * 4. Marcar como inicializada
     * 5. Manejar errores si ocurren
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de inicializaci√≥n del sistema
     * - Orquesta el proceso de inicializaci√≥n sin implementar detalles
     * - Delega validaci√≥n a validateEnvironment()
     * - Delega conexi√≥n a connectionManager
     * 
     * PRINCIPIO DIP (Dependency Inversion Principle):
     * - Depende de abstracciones (connectionManager, config)
     * - No depende de implementaciones concretas
     * - Facilita testing y mantenimiento
     * - Permite intercambiar implementaciones
     * 
     * PATR√ìN TEMPLATE METHOD:
     * - Define el flujo est√°ndar de inicializaci√≥n
     * - Estructura fija pero permite personalizaci√≥n
     * - Puede ser extendido en subclases
     * 
     * MANEJO DE ERRORES:
     * - Captura cualquier error durante la inicializaci√≥n
     * - Muestra mensaje de error claro al usuario
     * - Termina la aplicaci√≥n con c√≥digo de error (1)
     * - Evita que la aplicaci√≥n contin√∫e en estado inconsistente
     */
    async initialize() {
        try {
            // Mostrar informaci√≥n de la aplicaci√≥n
            console.log(chalk.blue.bold('\nüèãÔ∏è  GymMaster CLI v' + config.app.version));
            console.log(chalk.gray('Inicializando aplicaci√≥n...\n'));

            // PRINCIPIO SRP: Validaci√≥n separada en m√©todo espec√≠fico
            // Verificar variables de entorno necesarias
            this.validateEnvironment();

            // PRINCIPIO DIP: Usa abstracci√≥n connectionManager
            // Conectar a MongoDB usando el gestor de conexiones
            await connectionManager.initialize();

            // Marcar la aplicaci√≥n como inicializada
            this.isInitialized = true;
            console.log(chalk.green('‚úÖ Aplicaci√≥n inicializada correctamente\n'));

        } catch (error) {
            // PRINCIPIO SRP: Manejo centralizado de errores
            // Mostrar error y terminar aplicaci√≥n
            console.error(chalk.red('‚ùå Error al inicializar la aplicaci√≥n:'), error.message);
            process.exit(1);
        }
    }

    /**
     * ========================================================================================
     * M√âTODO DE VALIDACI√ìN DE VARIABLES DE ENTORNO
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Valida que las variables de entorno necesarias est√©n configuradas.
     * Si faltan variables, muestra advertencias pero permite continuar con valores por defecto.
     * 
     * VARIABLES VALIDADAS:
     * - MONGODB_URI: URL de conexi√≥n a MongoDB
     * - MONGODB_DATABASE: Nombre de la base de datos
     * 
     * COMPORTAMIENTO:
     * - Si faltan variables: Muestra advertencia pero contin√∫a
     * - Si todas est√°n presentes: Contin√∫a sin mensajes
     * - No interrumpe la ejecuci√≥n por variables faltantes
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de validaci√≥n de entorno
     * - No hace otras tareas como conexi√≥n o configuraci√≥n
     * - Solo valida y reporta el estado del entorno
     * 
     * PRINCIPIO OCP (Open/Closed Principle):
     * - Extensible para nuevas validaciones sin modificar el m√©todo
     * - Se pueden agregar nuevas variables al array requiredVars
     * - Se pueden agregar nuevos tipos de validaci√≥n
     * - Cerrado para modificaci√≥n, abierto para extensi√≥n
     * 
     * BENEFICIOS:
     * - Detecta problemas de configuraci√≥n temprano
     * - Proporciona feedback claro al usuario
     * - Permite continuar con configuraci√≥n por defecto
     * - Facilita debugging de problemas de configuraci√≥n
     */
    validateEnvironment() {
        // Lista de variables de entorno requeridas
        const requiredVars = ['MONGODB_URI', 'MONGODB_DATABASE'];
        
        // Filtrar variables que no est√°n definidas
        const missingVars = requiredVars.filter(varName => !process.env[varName]);

        // Si faltan variables, mostrar advertencia
        if (missingVars.length > 0) {
            console.warn(chalk.yellow('‚ö†Ô∏è  Variables de entorno faltantes:'), missingVars.join(', '));
            console.log(chalk.gray('Usando valores por defecto...'));
        }
    }

    /**
     * ========================================================================================
     * M√âTODO DE MOSTRAR BANNER PRINCIPAL
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Muestra el banner ASCII art principal de la aplicaci√≥n con el nombre "GYMMASTER".
     * Incluye informaci√≥n de versi√≥n y descripci√≥n del sistema.
     * 
     * COMPONENTES DEL BANNER:
     * - Arte ASCII del nombre "GYMMASTER"
     * - Marco decorativo con caracteres Unicode
     * - Informaci√≥n de versi√≥n y descripci√≥n
     * - Colores distintivos para mejor presentaci√≥n
     * 
     * EFECTOS VISUALES:
     * - Limpia la consola antes de mostrar el banner
     * - Usa colores cyan para el marco principal
     * - Usa colores yellow para la informaci√≥n de versi√≥n
     * - Usa colores gray para el texto descriptivo
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de mostrar el banner
     * - No hace otras tareas como validaci√≥n o conexi√≥n
     * - Solo se encarga de la presentaci√≥n visual
     * 
     * PATR√ìN STRATEGY:
     * - Podr√≠a ser intercambiable por diferentes tipos de banner
     * - Permite cambiar el estilo sin modificar el c√≥digo cliente
     * - Facilita la personalizaci√≥n de la interfaz
     * 
     * PRINCIPIO OCP (Open/Closed Principle):
     * - Extensible para nuevos tipos de banner
     * - Se puede agregar informaci√≥n adicional sin modificar el m√©todo
     * - Permite personalizaci√≥n de colores y estilos
     * 
     * BENEFICIOS:
     * - Presentaci√≥n profesional de la aplicaci√≥n
     * - Identificaci√≥n clara del sistema
     * - Experiencia de usuario mejorada
     * - F√°cil personalizaci√≥n y mantenimiento
     */
    showBanner() {
        // Limpiar la consola para una presentaci√≥n limpia
        console.clear();
        
        // Mostrar el banner principal con arte ASCII
        console.log(chalk.cyan.bold(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                                                        ‚ïë
    ‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïë
    ‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïë
    ‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïë
    ‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïë
    ‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïë
    ‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïë
    ‚ïë                                                                                        ‚ïë
    ‚ïë                           üèãÔ∏è  CLI - Sistema de Gesti√≥n de Gimnasio üèãÔ∏è                 ‚ïë
    ‚ïë                                                                                        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        `));
        
        // Mostrar informaci√≥n de versi√≥n y descripci√≥n
        console.log(chalk.yellow.bold('    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.log(chalk.gray('    üöÄ Versi√≥n: 1.0.0 | üí™ Potencia tu gimnasio con tecnolog√≠a avanzada'));
        console.log(chalk.yellow.bold('    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
    }

    /**
     * ========================================================================================
     * M√âTODO DE MOSTRAR MEN√ö PRINCIPAL
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Muestra el men√∫ principal de la aplicaci√≥n con un dise√±o visual mejorado.
     * Organiza las opciones en categor√≠as l√≥gicas con colores distintivos.
     * 
     * ESTRUCTURA DEL MEN√ö:
     * 1. GESTI√ìN DE USUARIOS:
     *    - Gesti√≥n de Clientes
     *    - Gesti√≥n de Planes de Entrenamiento
     * 
     * 2. SEGUIMIENTO Y NUTRICI√ìN:
     *    - Seguimiento F√≠sico y Progreso
     *    - Planes de Nutrici√≥n
     * 
     * 3. CONTRATOS Y FINANZAS:
     *    - Gesti√≥n de Contratos
     *    - Control Financiero
     * 
     * 4. REPORTES Y CONFIGURACI√ìN:
     *    - Reportes y Estad√≠sticas
     *    - Configuraci√≥n del Sistema
     * 
     * 5. SALIR:
     *    - Salir del Sistema
     * 
     * DISE√ëO VISUAL:
     * - Usa marcos Unicode para mejor presentaci√≥n
     * - Colores distintivos para cada categor√≠a
     * - Emojis para identificaci√≥n visual r√°pida
     * - Estructura jer√°rquica clara
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de mostrar el men√∫
     * - No hace otras tareas como validaci√≥n o procesamiento
     * - Solo se encarga de la presentaci√≥n del men√∫
     * 
     * PRINCIPIO OCP (Open/Closed Principle):
     * - Extensible para nuevas opciones sin modificar el m√©todo
     * - Se pueden agregar nuevas categor√≠as
     * - Se pueden agregar nuevas opciones a categor√≠as existentes
     * - Cerrado para modificaci√≥n, abierto para extensi√≥n
     * 
     * PATR√ìN BUILDER:
     * - Construye el men√∫ paso a paso con diferentes secciones
     * - Cada secci√≥n se construye independientemente
     * - Facilita la creaci√≥n de interfaces complejas
     * - Permite personalizaci√≥n de cada secci√≥n
     * 
     * BENEFICIOS:
     * - Interfaz de usuario clara y organizada
     * - F√°cil navegaci√≥n para el usuario
     * - Presentaci√≥n profesional
     * - F√°cil mantenimiento y extensi√≥n
     */
    showMainMenu() {
        console.log(chalk.cyan.bold('    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.cyan.bold('    ‚îÇ') + chalk.white.bold('                        üìã MEN√ö PRINCIPAL                        ') + chalk.cyan.bold('‚îÇ'));
        console.log(chalk.cyan.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.gray('    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.gray('    ‚îÇ') + chalk.white('  Selecciona una opci√≥n del men√∫:                                    ') + chalk.gray('‚îÇ'));
        console.log(chalk.gray('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        // Opciones del men√∫ con dise√±o visual
        console.log(chalk.blue.bold('    ‚îå‚îÄ GESTI√ìN DE USUARIOS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.white('    ‚îÇ 1. üë• Gesti√≥n de Clientes                                          ‚îÇ'));
        console.log(chalk.white('    ‚îÇ 2. üìã Gesti√≥n de Planes de Entrenamiento                          ‚îÇ'));
        console.log(chalk.blue.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.green.bold('    ‚îå‚îÄ SEGUIMIENTO Y NUTRICI√ìN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.white('    ‚îÇ 3. üìä Seguimiento F√≠sico y Progreso                               ‚îÇ'));
        console.log(chalk.white('    ‚îÇ 4. ü•ó Planes de Nutrici√≥n                                         ‚îÇ'));
        console.log(chalk.green.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.magenta.bold('    ‚îå‚îÄ CONTRATOS Y FINANZAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.white('    ‚îÇ 5. üìÑ Gesti√≥n de Contratos                                        ‚îÇ'));
        console.log(chalk.white('    ‚îÇ 6. üí∞ Control Financiero                                          ‚îÇ'));
        console.log(chalk.magenta.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.yellow.bold('    ‚îå‚îÄ REPORTES Y CONFIGURACI√ìN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.white('    ‚îÇ 7. üìà Reportes y Estad√≠sticas                                     ‚îÇ'));
        console.log(chalk.white('    ‚îÇ 8. ‚öôÔ∏è  Configuraci√≥n del Sistema                                   ‚îÇ'));
        console.log(chalk.yellow.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.red.bold('    ‚îå‚îÄ SALIR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'));
        console.log(chalk.white('    ‚îÇ 9. üö™ Salir del Sistema                                            ‚îÇ'));
        console.log(chalk.red.bold('    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n'));
        
        console.log(chalk.gray('    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
        console.log(chalk.cyan('    üí° Tip: Usa las teclas num√©ricas para navegar por el men√∫'));
        console.log(chalk.gray('    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
    }

    /**
     * ========================================================================================
     * M√âTODO DE ANIMACI√ìN DE CARGA
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Muestra una animaci√≥n de carga con caracteres Unicode que simula un spinner.
     * Proporciona feedback visual al usuario durante la inicializaci√≥n del sistema.
     * 
     * COMPONENTES DE LA ANIMACI√ìN:
     * - Frames: Array de caracteres Unicode para el spinner
     * - Interval: Temporizador que cambia el frame cada 100ms
     * - Duraci√≥n: 2 segundos de animaci√≥n
     * - Mensaje: Texto que acompa√±a la animaci√≥n
     * 
     * CARACTERES UNICODE UTILIZADOS:
     * - ‚†ã ‚†ô ‚†π ‚†∏ ‚†º ‚†¥ ‚†¶ ‚†ß ‚†á ‚†è (Braille patterns)
     * - Crean efecto de rotaci√≥n visual
     * - Compatibles con la mayor√≠a de terminales
     * 
     * FLUJO DE LA ANIMACI√ìN:
     * 1. Mostrar mensaje inicial
     * 2. Iniciar loop de animaci√≥n
     * 3. Cambiar frame cada 100ms
     * 4. Esperar 2 segundos
     * 5. Limpiar la l√≠nea de animaci√≥n
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de mostrar animaci√≥n de carga
     * - No hace otras tareas como validaci√≥n o conexi√≥n
     * - Solo se encarga de la presentaci√≥n visual
     * 
     * PATR√ìN STRATEGY:
     * - Podr√≠a usar diferentes tipos de animaci√≥n
     * - Permite intercambiar algoritmos de animaci√≥n
     * - Facilita la personalizaci√≥n de la interfaz
     * 
     * PRINCIPIO OCP (Open/Closed Principle):
     * - Extensible para nuevos tipos de animaci√≥n
     * - Se pueden agregar nuevos frames
     * - Se puede cambiar la duraci√≥n
     * - Cerrado para modificaci√≥n, abierto para extensi√≥n
     * 
     * BENEFICIOS:
     * - Mejora la experiencia de usuario
     * - Indica que el sistema est√° trabajando
     * - Evita la sensaci√≥n de aplicaci√≥n "colgada"
     * - Presentaci√≥n profesional
     */
    async showLoadingAnimation() {
        // Frames de la animaci√≥n usando caracteres Unicode
        const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
        let frameIndex = 0;
        
        // Mostrar mensaje inicial
        console.log(chalk.blue('    Inicializando sistema...'));
        
        // Crear intervalo para la animaci√≥n
        const interval = setInterval(() => {
            // Escribir frame actual con mensaje
            process.stdout.write(`\r    ${chalk.cyan(frames[frameIndex])} Cargando m√≥dulos del sistema...`);
            // Avanzar al siguiente frame
            frameIndex = (frameIndex + 1) % frames.length;
        }, 100);
        
        // Simular tiempo de carga (2 segundos)
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Limpiar la animaci√≥n
        clearInterval(interval);
        process.stdout.write('\r' + ' '.repeat(50) + '\r');
    }

    /**
     * ========================================================================================
     * M√âTODO DE MENSAJE DE BIENVENIDA
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Muestra un mensaje de bienvenida con efectos visuales que presenta las caracter√≠sticas
     * principales del sistema GymMaster CLI al usuario.
     * 
     * COMPONENTES DEL MENSAJE:
     * - Marco decorativo con caracteres Unicode
     * - T√≠tulo de bienvenida con emojis
     * - Lista de caracter√≠sticas principales
     * - Mensaje de motivaci√≥n final
     * 
     * CARACTER√çSTICAS DESTACADAS:
     * - üë• Gesti√≥n completa de clientes
     * - üìã Planes de entrenamiento personalizados
     * - üìä Seguimiento de progreso en tiempo real
     * - ü•ó Control nutricional avanzado
     * - üí∞ Gesti√≥n financiera integrada
     * - üìà Reportes y estad√≠sticas detalladas
     * 
     * DISE√ëO VISUAL:
     * - Usa marcos Unicode para mejor presentaci√≥n
     * - Colores distintivos para cada secci√≥n
     * - Emojis para identificaci√≥n visual r√°pida
     * - Estructura jer√°rquica clara
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de mostrar mensaje de bienvenida
     * - No hace otras tareas como validaci√≥n o conexi√≥n
     * - Solo se encarga de la presentaci√≥n del mensaje
     * 
     * PATR√ìN TEMPLATE METHOD:
     * - Define la estructura del mensaje de bienvenida
     * - Estructura fija pero permite personalizaci√≥n
     * - Puede ser extendido en subclases
     * 
     * PRINCIPIO OCP (Open/Closed Principle):
     * - Extensible para nuevas caracter√≠sticas
     * - Se pueden agregar nuevas funcionalidades
     * - Se puede personalizar el mensaje
     * - Cerrado para modificaci√≥n, abierto para extensi√≥n
     * 
     * BENEFICIOS:
     * - Presentaci√≥n profesional del sistema
     * - Informaci√≥n clara sobre las capacidades
     * - Experiencia de usuario mejorada
     * - F√°cil mantenimiento y personalizaci√≥n
     */
    showWelcomeMessage() {
        // Mostrar marco de bienvenida
        console.log(chalk.green.bold('\n    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.green.bold('    ‚ïë') + chalk.white.bold('                    üéâ ¬°BIENVENIDO A GYMMASTER CLI! üéâ                    ') + chalk.green.bold('‚ïë'));
        console.log(chalk.green.bold('    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        
        // Mostrar caracter√≠sticas principales
        console.log(chalk.cyan('\n    üåü Caracter√≠sticas principales:'));
        console.log(chalk.white('    ‚Ä¢ üë• Gesti√≥n completa de clientes'));
        console.log(chalk.white('    ‚Ä¢ üìã Planes de entrenamiento personalizados'));
        console.log(chalk.white('    ‚Ä¢ üìä Seguimiento de progreso en tiempo real'));
        console.log(chalk.white('    ‚Ä¢ ü•ó Control nutricional avanzado'));
        console.log(chalk.white('    ‚Ä¢ üí∞ Gesti√≥n financiera integrada'));
        console.log(chalk.white('    ‚Ä¢ üìà Reportes y estad√≠sticas detalladas\n'));
        
        // Mostrar mensaje de motivaci√≥n
        console.log(chalk.yellow('    ‚ö° Sistema listo para usar. ¬°Comencemos! ‚ö°\n'));
    }

    /**
     * ========================================================================================
     * M√âTODO PRINCIPAL DE EJECUCI√ìN DE LA APLICACI√ìN
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Este es el m√©todo principal que orquesta todo el flujo de ejecuci√≥n de la aplicaci√≥n.
     * Define el orden de ejecuci√≥n y coordina todos los componentes del sistema.
     * 
     * FLUJO DE EJECUCI√ìN:
     * 1. Verificar si la aplicaci√≥n est√° inicializada
     * 2. Inicializar si es necesario (conexi√≥n DB, validaci√≥n entorno)
     * 3. Mostrar banner principal
     * 4. Mostrar animaci√≥n de carga
     * 5. Mostrar mensaje de bienvenida
     * 6. Iniciar interfaz CLI interactiva
     * 7. Manejar errores si ocurren
     * 
     * COMPONENTES COORDINADOS:
     * - Inicializaci√≥n del sistema
     * - Presentaci√≥n visual (banner, animaci√≥n, bienvenida)
     * - Interfaz CLI interactiva
     * - Manejo de errores
     * 
     * PATR√ìN TEMPLATE METHOD:
     * - Define el flujo est√°ndar de ejecuci√≥n de la aplicaci√≥n
     * - Estructura fija pero permite personalizaci√≥n
     * - Puede ser extendido en subclases
     * - Orquesta el proceso sin implementar detalles
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Orquesta el flujo principal sin implementar detalles
     * - Delega responsabilidades espec√≠ficas a otros m√©todos
     * - Solo se encarga de coordinar el flujo
     * - No implementa l√≥gica de negocio espec√≠fica
     * 
     * PRINCIPIO DIP (Dependency Inversion Principle):
     * - Depende de abstracci√≥n GymMasterCLI
     * - No depende de implementaci√≥n concreta
     * - Facilita testing y mantenimiento
     * - Permite intercambiar implementaciones
     * 
     * MANEJO DE ERRORES:
     * - Captura errores de la interfaz CLI
     * - Muestra mensaje de error claro
     * - Propaga el error para manejo superior
     * - Mantiene la integridad del sistema
     * 
     * BENEFICIOS:
     * - Flujo de ejecuci√≥n claro y predecible
     * - F√°cil mantenimiento y debugging
     * - Extensible para nuevas funcionalidades
     * - Manejo robusto de errores
     */
    async run() {
        // Verificar si la aplicaci√≥n est√° inicializada
        if (!this.isInitialized) {
            await this.initialize();
        }

        // PRINCIPIO SRP: Delegaci√≥n de responsabilidades
        // Mostrar banner principal
        this.showBanner();
        
        // PRINCIPIO SRP: Separaci√≥n de concerns
        // Mostrar animaci√≥n de carga
        await this.showLoadingAnimation();
        
        // PRINCIPIO SRP: Cada m√©todo tiene una responsabilidad
        // Mostrar mensaje de bienvenida
        this.showWelcomeMessage();
        
        // Iniciar interfaz CLI interactiva
        console.log(chalk.green('üöÄ Iniciando interfaz CLI interactiva...\n'));
        
        try {
            // PRINCIPIO DIP: Depende de abstracci√≥n, no de implementaci√≥n concreta
            const cli = new GymMasterCLI();
            await cli.iniciar();
        } catch (error) {
            // PRINCIPIO SRP: Manejo centralizado de errores
            console.error(chalk.red('‚ùå Error en la interfaz CLI:'), error.message);
            throw error;
        }
    }

    /**
     * ========================================================================================
     * M√âTODO DE CIERRE SEGURO DE LA APLICACI√ìN
     * ========================================================================================
     * 
     * DESCRIPCI√ìN:
     * Cierra la aplicaci√≥n de forma segura, liberando recursos y cerrando conexiones.
     * Garantiza que el sistema se cierre correctamente sin dejar recursos colgados.
     * 
     * FLUJO DE CIERRE:
     * 1. Mostrar mensaje de cierre
     * 2. Cerrar conexiones a la base de datos
     * 3. Mostrar confirmaci√≥n de cierre
     * 4. Terminar proceso con c√≥digo de √©xito
     * 5. Manejar errores si ocurren
     * 
     * RECURSOS LIBERADOS:
     * - Conexiones a MongoDB
     * - Handlers de eventos
     * - Timers y intervals
     * - Memoria y recursos del sistema
     * 
     * C√ìDIGOS DE SALIDA:
     * - 0: Cierre exitoso
     * - 1: Error durante el cierre
     * 
     * PRINCIPIO SRP (Single Responsibility Principle):
     * - Responsabilidad √∫nica de cierre seguro
     * - No hace otras tareas como validaci√≥n o presentaci√≥n
     * - Solo se encarga de liberar recursos
     * 
     * PRINCIPIO DIP (Dependency Inversion Principle):
     * - Depende de abstracci√≥n connectionManager
     * - No depende de implementaci√≥n concreta de MongoDB
     * - Facilita testing y mantenimiento
     * - Permite intercambiar implementaciones
     * 
     * PATR√ìN TEMPLATE METHOD:
     * - Define el flujo est√°ndar de cierre
     * - Estructura fija pero permite personalizaci√≥n
     * - Puede ser extendido en subclases
     * - Orquesta el proceso sin implementar detalles
     * 
     * MANEJO DE ERRORES:
     * - Captura errores durante el cierre
     * - Muestra mensaje de error claro
     * - Termina con c√≥digo de error
     * - Evita cierres incompletos
     * 
     * BENEFICIOS:
     * - Cierre seguro y limpio
     * - Liberaci√≥n de recursos
     * - Manejo robusto de errores
     * - C√≥digos de salida claros
     */
    async shutdown() {
        try {
            // Mostrar mensaje de cierre
            console.log(chalk.gray('\nüîå Cerrando aplicaci√≥n...'));
            
            // PRINCIPIO DIP: Usa abstracci√≥n para cerrar conexiones
            await connectionManager.close();
            
            // Mostrar confirmaci√≥n de cierre
            console.log(chalk.green('‚úÖ Aplicaci√≥n cerrada correctamente'));
            process.exit(0);
        } catch (error) {
            // PRINCIPIO SRP: Manejo centralizado de errores de cierre
            console.error(chalk.red('‚ùå Error al cerrar la aplicaci√≥n:'), error.message);
            process.exit(1);
        }
    }
}

/**
 * ========================================================================================
 * MANEJO DE SE√ëALES DEL SISTEMA - PATR√ìN OBSERVER
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Configura listeners para manejar se√±ales del sistema operativo que indican
 * que la aplicaci√≥n debe cerrarse de forma segura.
 * 
 * SE√ëALES MANEJADAS:
 * - SIGINT: Interrupci√≥n del usuario (Ctrl+C)
 * - SIGTERM: Terminaci√≥n del sistema
 * 
 * COMPORTAMIENTO:
 * - Captura la se√±al del sistema
 * - Muestra mensaje de advertencia
 * - Ejecuta cierre seguro de la aplicaci√≥n
 * - Libera recursos y conexiones
 * 
 * PATR√ìN OBSERVER:
 * - Los listeners observan eventos del sistema
 * - Reaccionan autom√°ticamente a las se√±ales
 * - Permiten cierre seguro cuando el usuario presiona Ctrl+C
 * - Mantienen la integridad del sistema
 * 
 * PRINCIPIO SRP (Single Responsibility Principle):
 * - Cada listener tiene responsabilidad espec√≠fica de manejo de se√±ales
 * - No hace otras tareas como validaci√≥n o presentaci√≥n
 * - Solo se encarga de reaccionar a se√±ales del sistema
 * 
 * PRINCIPIO DIP (Dependency Inversion Principle):
 * - Depende de abstracci√≥n app.shutdown()
 * - No depende de implementaci√≥n concreta
 * - Facilita testing y mantenimiento
 * - Permite intercambiar implementaciones
 * 
 * BENEFICIOS:
 * - Cierre seguro de la aplicaci√≥n
 * - Liberaci√≥n de recursos
 * - Manejo robusto de interrupciones
 * - Experiencia de usuario mejorada
 */

// Listener para se√±al de interrupci√≥n (Ctrl+C)
process.on('SIGINT', async () => {
    console.log(chalk.yellow('\n‚ö†Ô∏è  Interrupci√≥n detectada. Cerrando aplicaci√≥n...'));
    await app.shutdown();
});

// Listener para se√±al de terminaci√≥n del sistema
process.on('SIGTERM', async () => {
    console.log(chalk.yellow('\n‚ö†Ô∏è  Terminaci√≥n detectada. Cerrando aplicaci√≥n...'));
    await app.shutdown();
});

/**
 * ========================================================================================
 * CREACI√ìN DE INSTANCIA √öNICA - PATR√ìN SINGLETON
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Crea la instancia √∫nica de la aplicaci√≥n GymMasterApp.
 * Garantiza que solo existe una instancia en toda la aplicaci√≥n.
 * 
 * PATR√ìN SINGLETON:
 * - Instancia √∫nica de la aplicaci√≥n
 * - Acceso global desde cualquier parte del c√≥digo
 * - Mantiene estado global consistente
 * - Evita conflictos de estado entre m√∫ltiples instancias
 * 
 * PRINCIPIO SRP (Single Responsibility Principle):
 * - Instancia global con responsabilidad de gesti√≥n de la app
 * - No hace otras tareas como validaci√≥n o presentaci√≥n
 * - Solo se encarga de representar la aplicaci√≥n
 * 
 * BENEFICIOS:
 * - Estado global consistente
 * - Acceso f√°cil desde cualquier m√≥dulo
 * - Evita duplicaci√≥n de instancias
 * - Facilita el manejo del estado
 */
const app = new GymMasterApp();

/**
 * ========================================================================================
 * PUNTO DE ENTRADA PRINCIPAL - PATR√ìN MODULE
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Ejecuta la aplicaci√≥n si es llamada directamente como m√≥dulo principal.
 * Verifica si el archivo es ejecutado directamente o importado como m√≥dulo.
 * 
 * CONDICI√ìN DE EJECUCI√ìN:
 * - require.main === module: Verifica si es el m√≥dulo principal
 * - Solo se ejecuta cuando se llama directamente al archivo
 * - No se ejecuta cuando se importa como m√≥dulo
 * 
 * FLUJO DE EJECUCI√ìN:
 * 1. Verificar si es el m√≥dulo principal
 * 2. Ejecutar app.run() si es as√≠
 * 3. Manejar errores si ocurren
 * 4. Terminar con c√≥digo de error si hay problemas
 * 
 * PATR√ìN MODULE:
 * - Encapsula funcionalidad relacionada
 * - Permite uso como m√≥dulo o aplicaci√≥n
 * - Facilita la reutilizaci√≥n de c√≥digo
 * - Mantiene la separaci√≥n de responsabilidades
 * 
 * PRINCIPIO SRP (Single Responsibility Principle):
 * - Punto de entrada con responsabilidad √∫nica de iniciar la app
 * - No hace otras tareas como validaci√≥n o presentaci√≥n
 * - Solo se encarga de iniciar la aplicaci√≥n
 * 
 * PRINCIPIO DIP (Dependency Inversion Principle):
 * - Depende de abstracci√≥n app.run()
 * - No depende de implementaci√≥n concreta
 * - Facilita testing y mantenimiento
 * - Permite intercambiar implementaciones
 * 
 * MANEJO DE ERRORES:
 * - Captura errores fatales de la aplicaci√≥n
 * - Muestra mensaje de error claro
 * - Termina con c√≥digo de error (1)
 * - Evita que la aplicaci√≥n contin√∫e en estado inconsistente
 * 
 * BENEFICIOS:
 * - Punto de entrada claro y predecible
 * - Manejo robusto de errores
 * - F√°cil testing y debugging
 * - Reutilizaci√≥n como m√≥dulo
 */
if (require.main === module) {
    app.run().catch(error => {
        console.error(chalk.red('‚ùå Error fatal:'), error.message);
        process.exit(1);
    });
}

/**
 * ========================================================================================
 * EXPORTACI√ìN DEL M√ìDULO - PATR√ìN MODULE
 * ========================================================================================
 * 
 * DESCRIPCI√ìN:
 * Exporta la clase GymMasterApp para uso en otros m√≥dulos.
 * Permite que otros archivos importen y usen la funcionalidad de la aplicaci√≥n.
 * 
 * PATR√ìN MODULE:
 * - Encapsula funcionalidad relacionada
 * - Permite reutilizaci√≥n en otros m√≥dulos
 * - Facilita la organizaci√≥n del c√≥digo
 * - Mantiene la separaci√≥n de responsabilidades
 * 
 * PRINCIPIO OCP (Open/Closed Principle):
 * - Permite extensi√≥n sin modificaci√≥n
 * - Se pueden crear subclases de GymMasterApp
 * - Se pueden agregar nuevas funcionalidades
 * - Cerrado para modificaci√≥n, abierto para extensi√≥n
 * 
 * BENEFICIOS:
 * - Reutilizaci√≥n de c√≥digo
 * - F√°cil testing y debugging
 * - Organizaci√≥n modular
 * - Extensibilidad
 */
module.exports = GymMasterApp;
