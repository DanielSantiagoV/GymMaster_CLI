// ===== IMPORTS Y DEPENDENCIAS =====
// Importaci√≥n del driver oficial de MongoDB
// PATR√ìN: Dependency Injection - Se inyectan las dependencias a trav√©s del constructor
// PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (MongoClient) no de implementaciones concretas
const { MongoClient } = require('mongodb'); // Driver oficial de MongoDB para operaciones directas
const SimpleDatabase = require('./simple-database'); // Base de datos en memoria como fallback
require('dotenv').config(); // Carga variables de entorno desde archivo .env

/**
 * Configuraci√≥n de conexi√≥n a MongoDB
 * Usa el driver oficial de MongoDB para operaciones directas y control fino
 * 
 * PATR√ìN: Strategy - Diferentes estrategias de conexi√≥n (MongoDB real vs memoria)
 * PATR√ìN: Facade - Proporciona una interfaz unificada para diferentes tipos de base de datos
 * PATR√ìN: Fallback - Estrategia alternativa cuando MongoDB no est√° disponible
 * PATR√ìN: Data Transfer Object (DTO) - Proporciona conexi√≥n estructurada
 * PRINCIPIO SOLID S: Responsabilidad √önica - Se encarga √∫nicamente de la configuraci√≥n de base de datos
 * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas estrategias de conexi√≥n
 * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (MongoClient, SimpleDatabase)
 * 
 * NOTA: Este m√≥dulo NO maneja transacciones ya que solo configura la conexi√≥n
 * BUENA PR√ÅCTICA: Configuraci√≥n flexible de base de datos con fallback
 */
class DatabaseConfig {
    /**
     * Constructor de la configuraci√≥n de base de datos
     * 
     * PATR√ìN: Strategy - Inicializa estrategias de conexi√≥n
     * PATR√ìN: State - Mantiene el estado de conexi√≥n
     * PRINCIPIO SOLID S: Responsabilidad de inicializar la configuraci√≥n
     * BUENA PR√ÅCTICA: Inicializaci√≥n de configuraci√≥n en constructor
     */
    constructor() {
        // PATR√ìN: State - Mantiene el estado del cliente
        // PRINCIPIO SOLID S: Responsabilidad de rastrear el cliente
        this.client = null;
        // PATR√ìN: State - Mantiene el estado de la base de datos
        // PRINCIPIO SOLID S: Responsabilidad de rastrear la base de datos
        this.db = null;
        // PATR√ìN: Strategy - Configuraci√≥n de URI con replica set para transacciones
        // BUENA PR√ÅCTICA: Usar replica set para habilitar transacciones
        this.uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/?replicaSet=rs0';
        // PATR√ìN: Strategy - Configuraci√≥n de nombre de base de datos
        // BUENA PR√ÅCTICA: Nombre de base de datos configurable
        this.databaseName = process.env.MONGODB_DATABASE || 'gymmaster';
    }

    /**
     * Establece conexi√≥n con MongoDB
     * @returns {Promise<Object>} Cliente y base de datos conectados
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de conexi√≥n
     * PATR√ìN: Strategy - Diferentes estrategias de conexi√≥n (MongoDB real vs memoria)
     * PATR√ìN: Fallback - Estrategia alternativa cuando MongoDB no est√° disponible
     * PATR√ìN: Data Transfer Object (DTO) - Retorna conexi√≥n estructurada
     * PATR√ìN: Guard Clause - Validaciones tempranas
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de establecer conexiones
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas estrategias de conexi√≥n
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para conexi√≥n
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (MongoClient, SimpleDatabase)
     * 
     * NOTA: No hay transacciones ya que solo establece la conexi√≥n
     * BUENA PR√ÅCTICA: M√©todo principal que orquesta la conexi√≥n con fallback
     */
    async connect() {
        try {
            // ===== INTENTO DE CONEXI√ìN A MONGODB REAL =====
            // PATR√ìN: Strategy - Estrategia principal de conexi√≥n
            // PRINCIPIO SOLID S: Responsabilidad de conectar a MongoDB real
            this.client = new MongoClient(this.uri);
            await this.client.connect();
            this.db = this.client.db(this.databaseName);
            
            // ===== CONFIRMACI√ìN DE CONEXI√ìN =====
            // PATR√ìN: Observer - Notifica el √©xito de la conexi√≥n
            // PRINCIPIO SOLID S: Responsabilidad de confirmar conexi√≥n exitosa
            console.log(`‚úÖ Conectado a MongoDB: ${this.databaseName}`);
            
            // ===== RETORNO DE CONEXI√ìN =====
            // PATR√ìN: Data Transfer Object (DTO) - Retorna conexi√≥n estructurada
            // PRINCIPIO SOLID S: Responsabilidad de retornar conexi√≥n configurada
            return { client: this.client, db: this.db };
        } catch (error) {
            // ===== FALLBACK A BASE DE DATOS EN MEMORIA =====
            // PATR√ìN: Fallback - Estrategia alternativa cuando MongoDB no est√° disponible
            // PRINCIPIO SOLID S: Responsabilidad de manejar fallos de conexi√≥n
            console.log('‚ö†Ô∏è MongoDB no disponible, usando base de datos en memoria');
            console.log('üí° Para usar MongoDB real, instala MongoDB siguiendo INSTALAR_MONGODB.md');
            
            // ===== CONFIGURACI√ìN DE FALLBACK =====
            // PATR√ìN: Strategy - Estrategia alternativa de conexi√≥n
            // PRINCIPIO SOLID S: Delegaci√≥n de responsabilidad a SimpleDatabase
            this.client = new SimpleDatabase();
            this.db = this.client;
            
            // ===== CONEXI√ìN ALTERNATIVA =====
            // PATR√ìN: Facade - Delega conexi√≥n a SimpleDatabase
            // PRINCIPIO SOLID S: Delegaci√≥n de responsabilidad de conexi√≥n
            const connection = await this.client.connect();
            return connection;
        }
    }

    /**
     * Cierra la conexi√≥n con MongoDB
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de desconexi√≥n
     * PATR√ìN: Strategy - Diferentes estrategias de desconexi√≥n seg√∫n el tipo de cliente
     * PATR√ìN: Guard Clause - Validaciones tempranas
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de cerrar conexiones
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas estrategias de desconexi√≥n
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para desconexi√≥n
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo cierra la conexi√≥n
     * BUENA PR√ÅCTICA: M√©todo para cerrar conexiones de forma segura
     */
    async disconnect() {
        // ===== VALIDACI√ìN DE CLIENTE =====
        // PATR√ìN: Guard Clause - Validaci√≥n temprana de existencia del cliente
        // PRINCIPIO SOLID S: Responsabilidad de validar estado del cliente
        if (this.client) {
            // ===== ESTRATEGIA DE DESCONEXI√ìN PARA MONGODB REAL =====
            // PATR√ìN: Strategy - Estrategia de desconexi√≥n para MongoDB real
            // PRINCIPIO SOLID S: Responsabilidad de cerrar conexi√≥n MongoDB
            if (this.client.close) {
                await this.client.close();
                console.log('üîå Conexi√≥n a MongoDB cerrada');
            } else {
                // ===== ESTRATEGIA DE DESCONEXI√ìN PARA BASE DE DATOS EN MEMORIA =====
                // PATR√ìN: Strategy - Estrategia de desconexi√≥n para SimpleDatabase
                // PRINCIPIO SOLID S: Responsabilidad de cerrar conexi√≥n en memoria
                await this.client.disconnect();
                console.log('üîå Conexi√≥n a base de datos en memoria cerrada');
            }
        }
    }

    /**
     * Obtiene la instancia de la base de datos
     * @returns {Object} Instancia de la base de datos
     * 
     * PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n
     * PATR√ìN: Facade - Proporciona acceso a la base de datos
     * PATR√ìN: Data Transfer Object (DTO) - Retorna instancia de base de datos
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de obtener la base de datos
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para obtener base de datos
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo obtiene la instancia
     * BUENA PR√ÅCTICA: M√©todo para acceder a la base de datos de forma segura
     */
    getDatabase() {
        // ===== VALIDACI√ìN DE CONEXI√ìN =====
        // PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n
        // PRINCIPIO SOLID S: Responsabilidad de validar estado de conexi√≥n
        if (!this.db) {
            throw new Error('Base de datos no conectada. Llama a connect() primero.');
        }
        
        // ===== RETORNO DE BASE DE DATOS =====
        // PATR√ìN: Facade - Proporciona acceso a la base de datos
        // PRINCIPIO SOLID S: Responsabilidad de retornar instancia de base de datos
        return this.db;
    }

    /**
     * Verifica el estado de la conexi√≥n
     * @returns {boolean} True si est√° conectado
     * 
     * PATR√ìN: State - Consulta el estado de conexi√≥n
     * PATR√ìN: Strategy - Diferentes estrategias de verificaci√≥n seg√∫n el tipo de cliente
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de verificar estado
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas verificaciones
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para verificaci√≥n
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo verifica estado
     * BUENA PR√ÅCTICA: M√©todo para verificar estado de conexi√≥n
     */
    isConnected() {
        // ===== VERIFICACI√ìN DE ESTADO =====
        // PATR√ìN: State - Consulta el estado de conexi√≥n
        // PATR√ìN: Strategy - Diferentes estrategias seg√∫n el tipo de cliente
        // PRINCIPIO SOLID S: Responsabilidad de verificar estado completo
        return this.client && this.client.topology && this.client.topology.isConnected();
    }

    /**
     * Verifica si las transacciones est√°n disponibles
     * @returns {Promise<boolean>} True si las transacciones est√°n disponibles
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de verificaci√≥n de transacciones
     * PATR√ìN: Strategy - Diferentes estrategias de verificaci√≥n seg√∫n el tipo de cliente
     * PATR√ìN: Guard Clause - Validaciones tempranas
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de verificar transacciones
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas verificaciones
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para verificaci√≥n de transacciones
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo verifica disponibilidad
     * BUENA PR√ÅCTICA: M√©todo para verificar disponibilidad de transacciones
     */
    async areTransactionsAvailable() {
        try {
            // ===== VALIDACI√ìN DE CLIENTE =====
            // PATR√ìN: Guard Clause - Validaci√≥n temprana de existencia del cliente
            // PRINCIPIO SOLID S: Responsabilidad de validar estado del cliente
            if (!this.client) {
                return false;
            }
            
            // ===== VERIFICACI√ìN DE TIPO DE BASE DE DATOS =====
            // PATR√ìN: Strategy - Diferentes estrategias seg√∫n el tipo de cliente
            // PRINCIPIO SOLID S: Responsabilidad de verificar tipo de base de datos
            if (this.client.constructor.name === 'SimpleDatabase') {
                return false;
            }
            
            // ===== PRUEBA DE SESI√ìN =====
            // PATR√ìN: Strategy - Estrategia de prueba de sesi√≥n para MongoDB
            // PRINCIPIO SOLID S: Responsabilidad de probar disponibilidad de transacciones
            const session = this.client.startSession();
            await session.endSession();
            return true;
        } catch (error) {
            // ===== MANEJO DE ERRORES =====
            // PATR√ìN: Error Wrapping - Envuelve errores con contexto espec√≠fico
            // PRINCIPIO SOLID S: Responsabilidad de manejo de errores del m√©todo
            console.log('‚ö†Ô∏è Transacciones no disponibles:', error.message);
            return false;
        }
    }

    /**
     * Obtiene informaci√≥n del replica set
     * @returns {Promise<Object>} Informaci√≥n del replica set
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de obtenci√≥n de informaci√≥n
     * PATR√ìN: Strategy - Estrategia espec√≠fica para MongoDB replica set
     * PATR√ìN: Guard Clause - Validaciones tempranas
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de obtener informaci√≥n del replica set
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para informaci√≥n de replica set
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo obtiene informaci√≥n
     * BUENA PR√ÅCTICA: M√©todo para obtener informaci√≥n del replica set
     */
    async getReplicaSetInfo() {
        try {
            // ===== VALIDACI√ìN DE CLIENTE =====
            // PATR√ìN: Guard Clause - Validaci√≥n temprana de existencia del cliente
            // PRINCIPIO SOLID S: Responsabilidad de validar estado del cliente
            if (!this.client) {
                throw new Error('Cliente no conectado');
            }
            
            // ===== ACCESO A BASE DE DATOS ADMIN =====
            // PATR√ìN: Strategy - Estrategia espec√≠fica para MongoDB replica set
            // PRINCIPIO SOLID S: Responsabilidad de acceder a base de datos admin
            const adminDb = this.client.db('admin');
            
            // ===== COMANDO DE REPLICA SET =====
            // PATR√ìN: Strategy - Estrategia de comando espec√≠fico para replica set
            // PRINCIPIO SOLID S: Responsabilidad de ejecutar comando de replica set
            const status = await adminDb.command({ replSetGetStatus: 1 });
            return status;
        } catch (error) {
            // ===== MANEJO DE ERRORES =====
            // PATR√ìN: Error Wrapping - Envuelve errores con contexto espec√≠fico
            // PRINCIPIO SOLID S: Responsabilidad de manejo de errores del m√©todo
            throw new Error(`Error al obtener informaci√≥n del replica set: ${error.message}`);
        }
    }
}

// ===== EXPORTACI√ìN DEL M√ìDULO =====
// PATR√ìN: Module Pattern - Exporta la clase como m√≥dulo
// PRINCIPIO SOLID S: Responsabilidad de proporcionar la interfaz p√∫blica de configuraci√≥n
module.exports = DatabaseConfig;
