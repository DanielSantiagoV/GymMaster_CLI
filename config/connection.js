// ===== IMPORTS Y DEPENDENCIAS =====
// Importaci√≥n de configuraci√≥n de base de datos
// PATR√ìN: Dependency Injection - Se inyectan las dependencias a trav√©s del constructor
// PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig) no de implementaciones concretas
const DatabaseConfig = require('./database'); // Configuraci√≥n espec√≠fica de MongoDB
const config = require('./index'); // Configuraci√≥n general de la aplicaci√≥n

/**
 * Singleton para manejar la conexi√≥n a MongoDB
 * Asegura una sola instancia de conexi√≥n en toda la aplicaci√≥n
 * 
 * PATR√ìN: Singleton - Garantiza una sola instancia de conexi√≥n
 * PATR√ìN: Facade - Proporciona una interfaz simplificada para la conexi√≥n
 * PATR√ìN: Manager - Gestiona el ciclo de vida de la conexi√≥n
 * PATR√ìN: Data Transfer Object (DTO) - Proporciona conexi√≥n estructurada
 * PRINCIPIO SOLID S: Responsabilidad √önica - Se encarga √∫nicamente de la gesti√≥n de conexiones
 * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades de conexi√≥n
 * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig)
 * 
 * NOTA: Este m√≥dulo NO maneja transacciones ya que solo gestiona la conexi√≥n
 * BUENA PR√ÅCTICA: Gestor de conexiones centralizado y optimizado
 */
class ConnectionManager {
    /**
     * Constructor del gestor de conexiones
     * 
     * PATR√ìN: Singleton - Inicializa el estado del singleton
     * PATR√ìN: Manager - Gestiona el estado de la conexi√≥n
     * PRINCIPIO SOLID S: Responsabilidad de inicializar el gestor de conexiones
     * BUENA PR√ÅCTICA: Inicializaci√≥n del estado de conexi√≥n en constructor
     */
    constructor() {
        // PATR√ìN: Dependency Injection - Inyecta dependencia de configuraci√≥n
        // PRINCIPIO SOLID D: Depende de abstracci√≥n DatabaseConfig
        this.dbConfig = new DatabaseConfig();
        // PATR√ìN: State - Mantiene el estado de conexi√≥n
        // PRINCIPIO SOLID S: Responsabilidad de rastrear el estado de conexi√≥n
        this.isConnected = false;
    }

    /**
     * Inicializa la conexi√≥n a MongoDB
     * @returns {Promise<Object>} Cliente y base de datos conectados
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de inicializaci√≥n
     * PATR√ìN: Singleton - Garantiza una sola conexi√≥n
     * PATR√ìN: Facade - Proporciona interfaz simplificada para conexi√≥n
     * PATR√ìN: Data Transfer Object (DTO) - Retorna conexi√≥n estructurada
     * PATR√ìN: Guard Clause - Validaciones tempranas
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de inicializar conexiones
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para inicializaci√≥n
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig)
     * 
     * NOTA: No hay transacciones ya que solo gestiona la conexi√≥n
     * BUENA PR√ÅCTICA: M√©todo principal que orquesta la inicializaci√≥n de conexiones
     */
    async initialize() {
        try {
            // ===== VALIDACI√ìN DE CONEXI√ìN EXISTENTE =====
            // PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n existente
            // PATR√ìN: Singleton - Reutiliza conexi√≥n existente
            // PRINCIPIO SOLID S: Responsabilidad de evitar conexiones duplicadas
            if (this.isConnected) {
                return { client: this.dbConfig.client, db: this.dbConfig.db };
            }

            // ===== ESTABLECIMIENTO DE CONEXI√ìN =====
            // PATR√ìN: Facade - Delega la conexi√≥n a DatabaseConfig
            // PRINCIPIO SOLID S: Delegaci√≥n de responsabilidad de conexi√≥n
            const connection = await this.dbConfig.connect();
            
            // ===== ACTUALIZACI√ìN DE ESTADO =====
            // PATR√ìN: State - Actualiza el estado de conexi√≥n
            // PRINCIPIO SOLID S: Responsabilidad de mantener estado consistente
            this.isConnected = true;
            
            // ===== OPTIMIZACI√ìN DE CONSULTAS =====
            // PATR√ìN: Strategy - Delegaci√≥n de creaci√≥n de √≠ndices
            // BUENA PR√ÅCTICA: Crear √≠ndices para optimizar consultas frecuentes
            await this.createIndexes(connection.db);
            
            // ===== RETORNO DE CONEXI√ìN =====
            // PATR√ìN: Data Transfer Object (DTO) - Retorna conexi√≥n estructurada
            // PRINCIPIO SOLID S: Responsabilidad de retornar conexi√≥n configurada
            return connection;
        } catch (error) {
            // ===== MANEJO DE ERRORES =====
            // PATR√ìN: Error Wrapping - Envuelve errores con contexto espec√≠fico
            // PRINCIPIO SOLID S: Responsabilidad de manejo de errores del m√©todo
            console.error('‚ùå Error al inicializar conexi√≥n:', error.message);
            throw error;
        }
    }

    /**
     * Crea √≠ndices b√°sicos para optimizar consultas frecuentes
     * @param {Object} db - Instancia de la base de datos
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de creaci√≥n de √≠ndices
     * PATR√ìN: Strategy - Diferentes estrategias de √≠ndices por colecci√≥n
     * PATR√ìN: Iterator - Itera sobre todas las colecciones
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de crear √≠ndices
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevos √≠ndices
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para √≠ndices
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - No depende de implementaciones externas
     * 
     * NOTA: No hay transacciones ya que solo crea √≠ndices
     * BUENA PR√ÅCTICA: Optimizaci√≥n de consultas con √≠ndices estrat√©gicos
     */
    async createIndexes(db) {
        try {
            // ===== √çNDICES PARA CLIENTES =====
            // PATR√ìN: Strategy - Estrategia de √≠ndices para clientes
            // BUENA PR√ÅCTICA: √çndices √∫nicos para campos cr√≠ticos
            await db.collection('clientes').createIndex({ email: 1 }, { unique: true }); // √çndice √∫nico para email
            await db.collection('clientes').createIndex({ telefono: 1 }); // √çndice para b√∫squedas por tel√©fono
            await db.collection('clientes').createIndex({ fechaRegistro: 1 }); // √çndice para ordenamiento por fecha

            // ===== √çNDICES PARA PLANES =====
            // PATR√ìN: Strategy - Estrategia de √≠ndices para planes
            // BUENA PR√ÅCTICA: √çndices para filtros frecuentes
            await db.collection('planes').createIndex({ estado: 1 }); // √çndice para filtros por estado
            await db.collection('planes').createIndex({ nivel: 1 }); // √çndice para filtros por nivel
            await db.collection('planes').createIndex({ fechaCreacion: 1 }); // √çndice para ordenamiento por fecha

            // ===== √çNDICES PARA CONTRATOS =====
            // PATR√ìN: Strategy - Estrategia de √≠ndices para contratos
            // BUENA PR√ÅCTICA: √çndices para relaciones y filtros
            await db.collection('contratos').createIndex({ clienteId: 1 }); // √çndice para b√∫squedas por cliente
            await db.collection('contratos').createIndex({ planId: 1 }); // √çndice para b√∫squedas por plan
            await db.collection('contratos').createIndex({ fechaInicio: 1 }); // √çndice para ordenamiento por fecha
            await db.collection('contratos').createIndex({ estado: 1 }); // √çndice para filtros por estado

            // ===== √çNDICES PARA SEGUIMIENTOS =====
            // PATR√ìN: Strategy - Estrategia de √≠ndices para seguimientos
            // BUENA PR√ÅCTICA: √çndices para consultas temporales y por cliente
            await db.collection('seguimientos').createIndex({ clienteId: 1 }); // √çndice para b√∫squedas por cliente
            await db.collection('seguimientos').createIndex({ fecha: 1 }); // √çndice para ordenamiento por fecha
            await db.collection('seguimientos').createIndex({ tipo: 1 }); // √çndice para filtros por tipo

            // ===== √çNDICES PARA FINANZAS =====
            // PATR√ìN: Strategy - Estrategia de √≠ndices para finanzas
            // BUENA PR√ÅCTICA: √çndices para reportes financieros
            await db.collection('finanzas').createIndex({ fecha: 1 }); // √çndice para reportes por fecha
            await db.collection('finanzas').createIndex({ tipo: 1 }); // √çndice para filtros por tipo
            await db.collection('finanzas').createIndex({ clienteId: 1 }); // √çndice para b√∫squedas por cliente

            // ===== CONFIRMACI√ìN DE √âXITO =====
            // PATR√ìN: Observer - Notifica el √©xito de la operaci√≥n
            // PRINCIPIO SOLID S: Responsabilidad de confirmar creaci√≥n de √≠ndices
            console.log('üìä √çndices de MongoDB creados exitosamente');
        } catch (error) {
            // ===== MANEJO DE ERRORES =====
            // PATR√ìN: Error Wrapping - Envuelve errores con contexto espec√≠fico
            // PRINCIPIO SOLID S: Responsabilidad de manejo de errores del m√©todo
            console.warn('‚ö†Ô∏è Advertencia: No se pudieron crear todos los √≠ndices:', error.message);
        }
    }

    /**
     * Obtiene la instancia de la base de datos
     * @returns {Object} Instancia de la base de datos
     * 
     * PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n
     * PATR√ìN: Facade - Proporciona acceso a la base de datos
     * PATR√ìN: Data Transfer Object (DTO) - Retorna instancia de base de datos
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de obtener la base de datos
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para obtener base de datos
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig)
     * 
     * NOTA: No hay transacciones ya que solo obtiene la instancia
     * BUENA PR√ÅCTICA: M√©todo para acceder a la base de datos de forma segura
     */
    getDatabase() {
        // ===== VALIDACI√ìN DE CONEXI√ìN =====
        // PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n
        // PRINCIPIO SOLID S: Responsabilidad de validar estado de conexi√≥n
        if (!this.isConnected) {
            throw new Error('Base de datos no conectada. Llama a initialize() primero.');
        }
        
        // ===== RETORNO DE BASE DE DATOS =====
        // PATR√ìN: Facade - Delega a DatabaseConfig
        // PRINCIPIO SOLID S: Delegaci√≥n de responsabilidad de base de datos
        return this.dbConfig.getDatabase();
    }

    /**
     * Cierra la conexi√≥n con MongoDB
     * 
     * PATR√ìN: Template Method - Define el flujo est√°ndar de cierre
     * PATR√ìN: State - Actualiza el estado de conexi√≥n
     * PATR√ìN: Facade - Delega el cierre a DatabaseConfig
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de cerrar conexiones
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas funcionalidades
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para cierre
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig)
     * 
     * NOTA: No hay transacciones ya que solo cierra la conexi√≥n
     * BUENA PR√ÅCTICA: M√©todo para cerrar conexiones de forma segura
     */
    async close() {
        // ===== VALIDACI√ìN DE CONEXI√ìN =====
        // PATR√ìN: Guard Clause - Validaci√≥n temprana de conexi√≥n
        // PRINCIPIO SOLID S: Responsabilidad de validar estado de conexi√≥n
        if (this.isConnected) {
            // ===== CIERRE DE CONEXI√ìN =====
            // PATR√ìN: Facade - Delega el cierre a DatabaseConfig
            // PRINCIPIO SOLID S: Delegaci√≥n de responsabilidad de cierre
            await this.dbConfig.disconnect();
            
            // ===== ACTUALIZACI√ìN DE ESTADO =====
            // PATR√ìN: State - Actualiza el estado de conexi√≥n
            // PRINCIPIO SOLID S: Responsabilidad de mantener estado consistente
            this.isConnected = false;
        }
    }

    /**
     * Verifica el estado de la conexi√≥n
     * @returns {boolean} True si est√° conectado
     * 
     * PATR√ìN: State - Consulta el estado de conexi√≥n
     * PATR√ìN: Facade - Delega verificaci√≥n a DatabaseConfig
     * PRINCIPIO SOLID S: Responsabilidad √önica - Solo se encarga de verificar estado
     * PRINCIPIO SOLID O: Abierto/Cerrado - Extensible para nuevas verificaciones
     * PRINCIPIO SOLID L: Sustituci√≥n de Liskov - Comportamiento consistente
     * PRINCIPIO SOLID I: Segregaci√≥n de Interfaces - M√©todo espec√≠fico para verificaci√≥n
     * PRINCIPIO SOLID D: Inversi√≥n de Dependencias - Depende de abstracciones (DatabaseConfig)
     * 
     * NOTA: No hay transacciones ya que solo verifica estado
     * BUENA PR√ÅCTICA: M√©todo para verificar estado de conexi√≥n
     */
    getConnectionStatus() {
        // ===== VERIFICACI√ìN DE ESTADO =====
        // PATR√ìN: State - Consulta el estado de conexi√≥n
        // PATR√ìN: Facade - Delega verificaci√≥n a DatabaseConfig
        // PRINCIPIO SOLID S: Responsabilidad de verificar estado completo
        return this.isConnected && this.dbConfig.isConnected();
    }
}

// ===== EXPORTACI√ìN DEL M√ìDULO =====
// PATR√ìN: Singleton - Exporta instancia √∫nica del gestor de conexiones
// PATR√ìN: Module Pattern - Exporta la instancia como m√≥dulo
// PRINCIPIO SOLID S: Responsabilidad de proporcionar la interfaz p√∫blica del gestor
module.exports = new ConnectionManager();
